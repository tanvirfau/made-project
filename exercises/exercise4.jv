// Pipeline to process temperature data
pipeline ProcessedTemperaturesPipeline {
    fetchData                 
    -> extractZip             
    -> selectCSVFile          
    -> interpretAsText        
    -> readCSV                
    -> renameColumns          
    -> deleteExtraColumns     
    -> defineTable            
    -> transformTemperature   
    -> transformBatteryTemp   
    -> saveToSQLite;

    block fetchData oftype HttpExtractor {
        url : "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    block extractZip oftype ArchiveInterpreter {
        archiveType : "zip";
    }

    block selectCSVFile oftype FilePicker {
        path : "/data.csv";
    }

    block interpretAsText oftype TextFileInterpreter {}

    block readCSV oftype CSVInterpreter {
        delimiter: ";";
    }

    block renameColumns oftype CellWriter {
        at: range A1:F1;
        write : ["id", "producer", "model", "month", "temperature", "battery_temperature"];
    }

    block deleteExtraColumns oftype ColumnDeleter {
        delete: [column G, column H, column I, column J, column K];
    }

    block defineTable oftype TableInterpreter {
        header: false;
        columns: [
            "id" oftype positiveInteger,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype validMonth,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal
        ];
    }

    block transformTemperature oftype TableTransformer {
        inputColumns : ["temperature"];
        outputColumn : "temperature";
        uses : celsiusToFahrenheit;
    }

    block transformBatteryTemp oftype TableTransformer {
        inputColumns : ["battery_temperature"];
        outputColumn : "battery_temperature";
        uses : celsiusToFahrenheit;
    }

    block saveToSQLite oftype SQLiteLoader {
        table: 'temperatures';
        file: 'temperatures.sqlite';
    }

    transform celsiusToFahrenheit {
        from celsius oftype decimal;
        to fahrenheit oftype decimal;
        fahrenheit: (celsius * 9/5) + 32;
    }
}

valuetype positiveInteger oftype integer {
    constraints: [greaterThanZero];
}

constraint greaterThanZero on integer :
    value > 0;

valuetype validMonth oftype integer {
    constraints: [monthRange];
}

constraint monthRange oftype RangeConstraint {
    lowerBound: 1;
    lowerBoundInclusive: true;
    upperBound: 12;
    upperBoundInclusive: true;
}
