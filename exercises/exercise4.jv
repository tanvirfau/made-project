// Pipeline to process temperature data
pipeline ProcessedTemperaturesPipeline {
    tempHttpFetcher                 // Step 1: Fetch the zip file from the remote server
    -> tempZipExtractor             // Step 2: Extract the zip archive
    -> tempFileSelector             // Step 3: Select the relevant CSV file
    -> tempTextInterpreter          // Step 4: Interpret the file as text
    -> tempCSVReader                // Step 5: Read CSV data
    -> renameColumnsToEnglish       // Step 6: Rename columns to English
    -> removeExtraColumns           // Step 7: Keep only the required columns
    -> defineTableStructure         // Step 8: Define the table structure and data types
    -> temperatureToFahrenheit      // Step 9: Transform temperature to Fahrenheit
    -> batteryTempToFahrenheit      // Step 10: Transform battery temperature to Fahrenheit
    -> saveToDatabase;              // Step 11: Save data into SQLite database

    // Step 1: Fetch the zip file
    block tempHttpFetcher oftype HttpExtractor {
        url : "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    // Step 2: Extract the zip archive
    block tempZipExtractor oftype ArchiveInterpreter {
        archiveType : "zip";
    }

    // Step 3: Select the relevant CSV file (data.csv)
    block tempFileSelector oftype FilePicker {
        path : "/data.csv";
    }

    // Step 4: Interpret the file as text
    block tempTextInterpreter oftype TextFileInterpreter {
    }

    // Step 5: Interpret the text file as a CSV
    block tempCSVReader oftype CSVInterpreter {
        delimiter: ";";
    }

    // Step 6: Rename German column headers to English
    block renameColumnsToEnglish oftype CellWriter {
        at: range A1:F1;
        write : ["id", "producer", "model", "month", "temperature", "battery_temperature"];
    }

    // Step 7: Keep only the required columns
    block removeExtraColumns oftype ColumnDeleter {
        delete : [column G, column H, column I, column J];  // Remove all unnecessary columns
    }

    // Step 8: Define table structure with appropriate data types and constraints
    block defineTableStructure oftype TableInterpreter {
        header: false;
        columns: [
            "id" oftype positiveInteger,              // ID must be greater than 0
            "producer" oftype text,                  // Producer name
            "model" oftype text,                     // Model name
            "month" oftype validMonth,               // Month must be between 1 and 12
            "temperature" oftype decimal,            // Temperature data as decimal
            "battery_temperature" oftype decimal     // Battery temperature as decimal
        ];
    }

    // Step 9: Convert temperature to Fahrenheit
    block temperatureToFahrenheit oftype TableTransformer {
        inputColumns : ["temperature"];
        outputColumn : "temperature";
        uses : celsiusToFahrenheit;
    }

    // Step 10: Convert battery temperature to Fahrenheit
    block batteryTempToFahrenheit oftype TableTransformer {
        inputColumns : ["battery_temperature"];
        outputColumn : "battery_temperature";
        uses : celsiusToFahrenheit;
    }

    // Step 11: Save the transformed data into an SQLite database
    block saveToDatabase oftype SQLiteLoader {
        table: 'temperatures';                     // Table name
        file: 'temperatures.sqlite';               // SQLite database file
    }

    // Transformation function to convert Celsius to Fahrenheit
    transform celsiusToFahrenheit {
        from celsius oftype decimal;               // Input value in Celsius
        to fahrenheit oftype decimal;              // Output value in Fahrenheit
        fahrenheit: (celsius * 9/5) + 32;          
    }
}

// Define a value type for positive integers
valuetype positiveInteger oftype integer {
    constraints: [greaterThanZero];
}

// Constraint to ensure value is greater than 0
constraint greaterThanZero on integer :
    value > 0;

// Define a value type for valid months (1-12)
valuetype validMonth oftype integer {
    constraints: [monthRange];
}

// Constraint to ensure month values are between 1 and 12
constraint monthRange oftype RangeConstraint {
    lowerBound: 1;
    lowerBoundInclusive: true;
    upperBound: 12;
    upperBoundInclusive: true;
}
