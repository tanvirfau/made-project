// Temperature Pipeline
pipeline ProcessedTemperaturesPipeline  {
    fetchData 
    -> extractZip 
    -> tempFilePicker 
    -> interpretAsText
    -> readCSV  
    -> renameColumns 
    -> transformBatteryTemp
    -> deleteExtraColumns 
    -> defineTable 
    -> transformTemperature 
    -> batteryTempTransformer 
    -> saveToSQLite;

    // Step 1: Fetch the zip file from the provided URL
    block fetchData oftype HttpExtractor {
        url : "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    // Step 2: Extract the downloaded zip archive
    block extractZip oftype ArchiveInterpreter {
        archiveType : "zip";
    }

    // Step 3: Select the relevant CSV file from the extracted archive
    block tempFilePicker oftype FilePicker  {
        path : "/data.csv";
    }

    // Step 4: Interpret the selected file as a text file
    block interpretAsText oftype TextFileInterpreter {
    }

    // Step 5: Read the text file as a CSV using a semicolon as the delimiter
    block readCSV  oftype CSVInterpreter {
        delimiter: ";";
    }

   // Step 6: Rename the German column headers to English
    block renameColumns oftype CellWriter {
        at: range A1:E1;
        write : ["id", "producer", "model", "month", "temperature"];
    }

    block transformBatteryTemp oftype CellWriter {
        at: cell J1;
        write : ["battery_temperature"];
    }

   // Step 7: Remove unnecessary columns to the right of "Geraet aktiv"
    block deleteExtraColumns oftype ColumnDeleter {
        delete : [column F, column G, column H, column I];
    }

    // Step 8: Define the table structure with SQLite-compatible types and validations
    block defineTable oftype TableInterpreter {
        header: false;
        columns: [
            "id" oftype positiveValueType,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype months,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal,
        ];
    }

    // Step 9: Convert the "temperature" column from Celsius to Fahrenheit
    block transformTemperature oftype TableTransformer {
        inputColumns : ["temperature"];
        outputColumn : "temperature";
        uses : celsius_to_fahr;
    }

    // Step 10: Convert the "battery_temperature" column from Celsius to Fahrenheit
    block batteryTempTransformer oftype TableTransformer {
        inputColumns : ["battery_temperature"];
        outputColumn : "battery_temperature";
        uses : celsius_to_fahr;
    }

    // Step 11: Save the processed data into an SQLite database
    block saveToSQLite oftype SQLiteLoader {
        table: 'temperatures';
        file: 'temperatures.sqlite';
    }

    // Transformation function to convert Celsius to Fahrenheit
    transform celsius_to_fahr {
        from celsius oftype decimal;
        to fahrenheit oftype decimal;
        fahrenheit: (celsius * 9/5) + 32;
 }
}

valuetype positiveValueType oftype integer {
    constraints : [ positiveValueConstraint ];
}

constraint positiveValueConstraint on integer :
    value >= 0;

constraint rangeMonthConst oftype RangeConstraint {
    lowerBound: 1;
    lowerBoundInclusive: true;
    upperBound: 12;
    upperBoundInclusive: true;
}

valuetype months oftype integer {
    constraints: [rangeMonthConst];
}